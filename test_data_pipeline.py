# -*- coding: utf-8 -*-
"""test_data_pipeline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LbuSsVejl3EkXlDYSh7BsFhtAWG2GhGn
"""

class TestDataPipeline(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        cls.file_path = 'billing_data.csv'
        cls.output_file = 'output.csv'

    def test_data_extraction(self):
        # Arrange

        # Act
        result = data_extraction(self.file_path)

        # Assert
        self.assertIsInstance(result, pd.DataFrame)
        self.assertEqual(len(result), 5)
        self.assertEqual(list(result.columns), ['customer_id', 'billing_amount', 'tax_amount'])

    def test_data_transformation(self):
        # Arrange
        input_data = pd.DataFrame({
            'customer_id': [1, 2, 3, 4, 5],
            'billing_amount': ['$100', '$200', '$300', '$400', '$500'],
            'tax_amount': [10, 20, 30, 40, 50]
        })

        # Act
        result = data_transformation(input_data)

        # Assert
        self.assertIsInstance(result, pd.DataFrame)
        self.assertEqual(len(result), 5)
        self.assertEqual(list(result.columns), ['customer_id', 'billing_amount', 'tax_amount', 'total_charges'])
        self.assertEqual(result['total_charges'].tolist(), [110, 220, 330, 440, 550])

    def test_data_loading(self):
        # Arrange
        input_data = pd.DataFrame({
            'customer_id': [1, 2, 3],
            'billing_amount': [100, 200, 300],
            'tax_amount': [10, 20, 30],
            'total_charges': [110, 220, 330]
        })

        # Act
        data_loading(input_data, self.output_file)

        # Assert
        result = pd.read_csv(self.output_file)
        self.assertIsInstance(result, pd.DataFrame)
        self.assertEqual(len(result), 3)
        self.assertEqual(list(result.columns), ['customer_id', 'billing_amount', 'tax_amount', 'total_charges'])
        self.assertEqual(result['total_charges'].tolist(), [110, 220, 330])

    @classmethod
    def tearDownClass(cls):
        # Clean up the output file after all tests have run
        import os
        if os.path.exists(cls.output_file):
            os.remove(cls.output_file)

if __name__ == '__main__':
    unittest.main()